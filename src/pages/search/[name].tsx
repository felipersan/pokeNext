import { AnyARecord } from 'dns'
import { NextPage } from 'next'
import Head from 'next/head'
import { useEffect, useState } from 'react'
import { QueryCache } from 'react-query'
import styles from '../../styles/Home.module.css'

import { pokemonGeneric, searchPokemon } from '../../interfaces/API/GET'
import { useGetPokemon } from '../../services/pokeApi/GET/useGetPokemon'

import * as S from '../../styles/pages/search/styles'
import InfiniteScroll from 'react-infinite-scroll-component'
import CardPokemon from '../../components/pages/CardPokemon'
import { useRouter } from 'next/router'

const Search: NextPage = ({ pokemonsArray }: any) => {
  const [offsetPokemon, setOffsetPokemon] = useState<number>(0)
  const [pokemons, setPokemons] = useState<any[]>([])

  const { pokemonsWithPagination } = useGetPokemon(offsetPokemon, 1154)

  const router = useRouter()
  const {name} = router.query

  useEffect(()=>{
    if (pokemonsWithPagination){
      handleSearchPokemon(pokemonsWithPagination.data.results, name as string)
    }
  },[name])

  useEffect(()=>{
    if (pokemonsWithPagination){
      handleSearchPokemon(pokemonsWithPagination.data.results, name as string)
    }
  },[pokemonsWithPagination])

  function handleSearchPokemon(pokemonArray:Array<pokemonGeneric>, pokemonName:string){
    let newArrayPokemon = pokemonArray.filter((row:pokemonGeneric)=>{
      if (row.name.includes(name as unknown as string )) return(row)
    })
    setPokemons(newArrayPokemon)
    
  }

  async function clearCache() {
    const queryCache = new QueryCache({
      onError: error => {
        console.log(error)
      },
      onSuccess: data => {
        console.log(data)
      }
    })

    const query = queryCache.clear()
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <S.Container className="DisplayGridPokemon">
        
          {pokemons?.map((row: any, key: number) => (
            <CardPokemon key={key} data={row as pokemonGeneric}></CardPokemon>
          ))}
      </S.Container>
    </div>
  )
}

export default Search